#!/bin/bash
#set -e
#NAME=content-similarity

###############################################################################
# Configuration - read this section, modify only at conf/pipeline.conf
###############################################################################

# Read configuration file if it is present
[ -r ../conf/pipeline.conf ] && . ../conf/pipeline.conf

# Read configuration file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# set up the logging file
TIMESTAMP=`date +"%Y%m%d-%H%M%S"`
LOG_FILE="${LOG_DIR}/${NAME}/logs/train_${NAME}_${TIMESTAMP}.log"
LOGS="$LOG_DIR/$NAME/logs/train"*
ARCHIVE="$LOG_DIR/$NAME/archive"
mkdir -p "$LOG_DIR/$NAME/logs"
mkdir -p "$LOG_DIR/$NAME/archive"
[ "$(ls -A $LOGS)" ] && mv $LOGS "$LOG_DIR/$NAME/archive"
touch "$LOG_FILE"

# enginex_algo_dev.json, enginey_null_prod.json
ENGINE_JSON=engine.json

###############################################################################
# End of configuration
###############################################################################

###############
# Sanity check
###############

check_non_empty() {
  # $1 is the content of the variable in quotes e.g. "$FROM_EMAIL"
  # $2 is the error message
  if [[ $1 == "" ]]; then
    echo "ERROR: specify $2"
    exit -1
  fi
}

check_non_empty "$PIO_HOME"     "PIO_HOME at pipeline.conf"
check_non_empty "$LOG_DIR"      "LOG_DIR at pipeline.conf"
check_non_empty "$HOSTNAME"    "HOSTNAME at pipeline.conf"
check_non_empty "$PORT"        "PORT at pipeline.conf"
check_non_empty "$ACCESSKEY"   "ACCESSKEY at pipeline.conf"
check_non_empty "$ENGINE_JSON" "ENGINE_JSON at train script file"

#check_non_empty "$FROM_EMAIL"   "FROM_EMAIL at pipeline.conf"
#check_non_empty "$TARGET_EMAIL" "TARGET_EMAIL at pipeline.conf"
#check_non_empty "$EMAIL_SUBJECT" "TARGET_EMAIL at pipeline.conf"


###############
# End of sanity check
###############


##################
# Start of script
##################

TRAIN_COMMAND="${PIO_HOME}/bin/pio train --verbose -v $ENGINE_JSON
    --
    --executor-memory $TRAIN_EXECUTOR_MEMORY
    --driver-memory $TRAIN_DRIVER_MEMORY
    --total-executor-cores $TRAIN_CORES"

[ -n "$TRAIN_MASTER" ] && TRAIN_COMMAND="$TRAIN_COMMAND --master $TRAIN_MASTER"

# Print the command then quit if we see any arguments (use for debug only)
#if [[ "$1" != "" ]]; then
  #echo "[DEBUG] Commands to be run (not actually running it):"
  #echo "$(echo $TRAIN_COMMAND | sed "s/\\n//g")"
  #exit -1
#fi


##################
# End of script
##################


######################
# Actually running it
######################

cd ../pipeline

$($TRAIN_COMMAND 1>$LOG_FILE 2>&1) &
RESULT=$?

cd .. # change back to the location of the script

######################
# End of actual running
######################

exit $RESULT
